import { GridOptions, GridReadyEvent, ICellRendererParams } from '@ag-grid-community/core';
import { NzModalService } from 'ng-zorro-antd/modal';
import { RowNode } from '@ag-grid-community/core/dist/cjs/entities/rowNode';
import { FirstDataRenderedEvent } from '@ag-grid-community/core/dist/cjs/events';
import { Component, OnInit, ViewChild } from '@angular/core';
import { ACLService } from '@delon/acl';
import { SFSchema } from '@delon/form';
import { _HttpClient } from '@delon/theme';
import { AclColDef, IGridDataSource, NgxGridTableComponent, NgxGridTableConstants } from '@shared';
import { DataSourceUtils } from '../../DataSourceUtils';
import { ${cfg.table.angularCompClassName}CreateComponent } from './modal/create.component';
import { ${cfg.table.angularCompClassName}EditComponent } from './modal/edit.component';
import { ${cfg.table.angularCompClassName}ViewComponent } from './modal/view.component';

@Component({
    selector: 'app-${cfg.table.angularCompSelectorName}',
    templateUrl: '${cfg.table.angularCompHtmlName}',
})
export class ${cfg.table.angularCompClassName}Component implements OnInit {
    // properties 的定义为 filter-input.widget.ts -> FilterSFUISchemaItem 接口
    // 查询字段配置
    schema: SFSchema = {
        properties: {
            // testACL: { type: 'string', title: '测试权限', ui: { options: ['greaterThanOrEqual'], acl: { ability: ['POST:/TEST'] } } },
            // testSelect1: { type: 'array', title: '测试多选2', ui: { options: ['in'], selectValues: [{label: 'opt1', value: '选项1'}, {label: 'opt2', value: '选项2'}, {label: 'opt3', value: '选项3'}] } } },
            // testSelect2: { type: 'array', title: '测试多选', ui: { options: ['in'], selectValues: ['选项1', '选项2', '选项3'] } } }, // key和value是一样的时候，可以直接简写成字符串
#foreach($field in ${table.fields})
    #if(${field.propertyType.equalsIgnoreCase("boolean")})
            ${field.propertyName}: { type: 'array', title: '${field.comment}', ui: { options: ['in'], selectValues: [{label: '是', value: true}, {label: '否', value: false}] } },
    #elseif(
        ${field.propertyType.equals("int")} ||
        ${field.propertyType.equals("Integer")} ||
        ${field.propertyType.equalsIgnoreCase("long")} ||
        ${field.propertyType.equalsIgnoreCase("short")} ||
        ${field.propertyType.equalsIgnoreCase("byte")}
    )
            ${field.propertyName} : { type: 'integer', title: '${field.comment}', ui: { options: ['equals'] } },
    #elseif(${field.propertyType.equals("BigDecimal")})
            ${field.propertyName} : { type: 'number', title: '${field.comment}', ui: { options: ['equals'] } },
    #elseif(${field.propertyType.equals("String")})
            ${field.propertyName} : { type: 'string', title: '${field.comment}', ui: { options: ['contains'] } },
    #elseif(${field.propertyType.equals("Date")} || ${field.propertyType.startsWith("LocalDate")})
            ${field.propertyName} : { type: 'string', title: '${field.comment}', format: 'date-time',  ui: { options: ['inRange'] } },
    #else
            // 所有未知的复杂类型都当作枚举处理
            ${field.propertyName}: { type: 'array', title: '${field.comment}', ui: { options: ['in'], selectValues: ['0', '1'] } },
    #end
#end
        },
        required: ['text'],
        ui: {
            width: 275,
            spanLabelFixed: 80,
            optionShowType: 'symbol',
            // aclTmpl: 'POST:/{}/OUT',
            // acl: { ability: ['POST:/TEST0'] },
        },
    };

    // 表格配置
    columnDefs: AclColDef[] = [
        // { headerName: 'testACL', field: 'testACL', acl: { ability: ['POST:/TEST'] } }, //加上acl后只有符合权限的才展示出来
        // { headerName: 'group', field: 'typeGroup', enableRowGroup: true }, // 需要分组查询，则将 enableRowGroup设置为true
#foreach($field in ${table.fields})
    #if(${field.propertyName.equalsIgnoreCase("id")})
        { headerName: 'id', field: 'id', sort: 'desc', sortable: true, checkboxSelection: true, headerCheckboxSelection: true },
    #else
        { headerName: '${field.comment}', field: '${field.propertyName}' },
    #end
#end
        { headerName: '操作', field: NgxGridTableConstants.OPTION_FIELD },
    ];

    gridOptions: GridOptions;

    dataSource: IGridDataSource<any>;

    @ViewChild(NgxGridTableComponent)
    table!: NgxGridTableComponent;

    constructor(private http: _HttpClient,
                private aclService: ACLService,
                private modal: NzModalService) {
        this.gridOptions = {
            enableCharts: false,
            columnDefs: this.columnDefs,
            enableRangeSelection: true,
            getRowNodeId: (data) => {
                return data.id;
            },
            onFirstDataRendered(event: FirstDataRenderedEvent): void {
                event.columnApi.autoSizeAllColumns();
            },
        };
        this.dataSource = DataSourceUtils.rowQuery(http, '${cfg.table.angularApiPath}/query', (r) => r);
    }

    ngOnInit(): void {

    }


    onGridReady(e: { event: GridReadyEvent; gridTable: NgxGridTableComponent }): void {
        // 添加右键菜单
        this.table.addMenu({
          name: 'test',
          show: 'selected',
          acl: { ability: ['${cfg.table.rolePrefix}delete'] },
          callback: (selected) => {
            console.log(selected);
          },
        });
        // 按每列内容重新分配列宽
        this.table.columnApi.autoSizeAllColumns();
    }

    onPageIndexChange(index: number): void {

    }

    onCreate(): void {
        this.modal.create({
            nzContent: ${cfg.table.angularCompClassName}CreateComponent,
            nzFooter: null,
            nzMaskClosable: false,
        }).afterClose.subscribe(result => {
            if (result.success) {
                this.table.refresh();
            }
        });
    }

    onEdit(cell: ICellRendererParams, row: RowNode): void {
        this.modal.create({
            nzContent: ${cfg.table.angularCompClassName}EditComponent,
            nzComponentParams: { record: row.data},
            nzFooter: null,
            nzMaskClosable: false,
        }).afterClose.subscribe(result => {
            if (result.success) {
                this.table.refresh();
            }
        });
    }

    onView(cell: ICellRendererParams, row: RowNode): void {
        this.modal.create({
            nzContent: ${cfg.table.angularCompClassName}ViewComponent,
            nzComponentParams: { record: row.data},
            nzFooter: null,
            nzMaskClosable: true,
        });
    }
}
